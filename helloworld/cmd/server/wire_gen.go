// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/devexps/go-micro/v2"
	"github.com/devexps/go-micro/v2/log"
	"github.com/devexps/go-micro/v2/registry"
	"your_project/api/gen/go/common/conf"
	"your_project/helloworld/internal/biz"
	"your_project/helloworld/internal/data"
	"your_project/helloworld/internal/server"
	"your_project/helloworld/internal/service"
)

// Injectors from wire.go:

// initApp init micro application.
func initApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*micro.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUseCase := biz.NewGreeterUseCase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUseCase)
	httpServer := server.NewHTTPServer(bootstrap, logger, greeterService)
	grpcServer := server.NewGRPCServer(bootstrap, logger, greeterService)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
